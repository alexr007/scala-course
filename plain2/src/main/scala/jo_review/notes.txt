I'm impressed by how you were able to keep a moderate learning curve and made it steep enough
very close to the end of the book

- we write code, not for computers and compilers.
- we write the code for humans, for us, tomorrow.

- 31 - VISIBLE, ACCESSIBLE, NESTED ?
but the second part of that sentence seems okay to me
cool explanation

+ good that you started from visibility in the beginning
+ it is great, that you provide the tasks, a lot of them to involve the reader into investigations and further reading

- 32
- don't you want to
  explain that `undefined` means `nothing` in terms of assignment operation?
- don't you want to
  put scheme of memory model variable/reference/memory/heap/stack
  probably, it will be easier further (I found it is easier to teach about JMM on lesson 5 out of 50)

- 33
  When you buy a car, it has either two pedals or three one =>
  - When you buy a car, it has either two pedals or three
  - When you buy a car, it has either two pedals or three ones

- 38
  very cool, that you have explained that all operators are shortcuts for object methods

- 39
  missed closing diamond bracket

- 42
  typo

- 43
  according to the declaration on p42, function vault has 2 arguments: storage and entrance
  but in the code snippet on p.43 you have passed only one, and it is an entrance (2nd)
  where is the 1st one (storage)
- 52 unit testing
- 55 mocking very cool explanation
     but maybe even get rid of the part of the code `console.log = ....`
     even you have mentioned that's a terrible practice
     wouldn't it be better if you just finish with: "there is no way to test that code"?
- 59 frameworks not only larger, but they are also put more constraints you should obey.

- 65 typos where->were, unussable->unusable,
     programms -> programs (???)

- 76. isn't R4 (destroy) is the outcome of meeting the bullet and the invader?
      because the user only moves and fires
- 76. are lacking => are lack?

- 78. according to implementation - it looks like there is only one bullet on the screen at the moment

- 85. grammar. is it -> it is

- 97 is there any reason for JS developers to know about thread safety?
     maybe the hidden goal is to motivate them to learn Java? )))
     JS is designed the way not to deal with concurrency

- 100. very cool mention about implementing which 'isn't in the scope
- 105. utility object. ha-ha. finally )))
- 105. why did you call it a vector? actually it is something like delta. what is the semantic?
- 106-107. your implementation of smart_div is actually a function off_borders.
           with just passing underlying div as a constructor parameter
           to make it object and really encapsulate wouldn't it be better if
           you delegate the underlying `d` behavior to the smart_div object?
- 108. patches? maybe filters, behaviors, extras, enrichers ...

- 112. Refactor the method patched.move() in order get rid of the reduce(). =>
       Refactor the method patched.move() to get rid of the reduce()
       OR:
       Refactor the method patched.move() in order to get rid of the reduce()

- 113. remove `sure` ?
- 118. don't you want to put the link to your blog about shades af immutability?

* not all the paragraphs are justified left to right some of them aligned to the left side (p102, 104...)
* don't you want to put more links to your blog?
